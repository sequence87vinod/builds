<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="2.8" jmeter="2.13 r1665067">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="BB9 SP14 JMeter Scripts" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Stg - User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="timeout" elementType="Argument">
            <stringProp name="Argument.name">timeout</stringProp>
            <stringProp name="Argument.value">1000000</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Timeout Request</stringProp>
          </elementProp>
          <elementProp name="host" elementType="Argument">
            <stringProp name="Argument.name">host</stringProp>
            <stringProp name="Argument.value">stsa.capella.edu</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">stsa.capella.edu</stringProp>
          </elementProp>
          <elementProp name="port" elementType="Argument">
            <stringProp name="Argument.name">port</stringProp>
            <stringProp name="Argument.value">443</stringProp>
            <stringProp name="Argument.desc">443 for https</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="protocol" elementType="Argument">
            <stringProp name="Argument.name">protocol</stringProp>
            <stringProp name="Argument.value">https</stringProp>
            <stringProp name="Argument.desc">https</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="password" elementType="Argument">
            <stringProp name="Argument.name">password</stringProp>
            <stringProp name="Argument.value">W@terf@11</stringProp>
            <stringProp name="Argument.desc">Password-Sunsh!n3</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="node.min" elementType="Argument">
            <stringProp name="Argument.name">node.min</stringProp>
            <stringProp name="Argument.value">3</stringProp>
            <stringProp name="Argument.desc">3</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="node.max" elementType="Argument">
            <stringProp name="Argument.name">node.max</stringProp>
            <stringProp name="Argument.value">6</stringProp>
            <stringProp name="Argument.desc">6</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="environment" elementType="Argument">
            <stringProp name="Argument.name">environment</stringProp>
            <stringProp name="Argument.value">stg</stringProp>
            <stringProp name="Argument.desc">Environment</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="course_id_test_data" elementType="Argument">
            <stringProp name="Argument.name">course_id_test_data</stringProp>
            <stringProp name="Argument.value">_10421_1</stringProp>
            <stringProp name="Argument.desc">New Section in Test Data</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="courseTitle" elementType="Argument">
            <stringProp name="Argument.name">courseTitle</stringProp>
            <stringProp name="Argument.value">Perf MBA6247 Section</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Perf MBA6247 Section   </stringProp>
          </elementProp>
          <elementProp name="Encoding" elementType="Argument">
            <stringProp name="Argument.name">Encoding</stringProp>
            <stringProp name="Argument.value">UTF-8</stringProp>
            <stringProp name="Argument.desc">Content Encoding</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="ltihost" elementType="Argument">
            <stringProp name="Argument.name">ltihost</stringProp>
            <stringProp name="Argument.value">stglti.capella.edu</stringProp>
            <stringProp name="Argument.desc">stglti.capella.edu</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Qa - User Defined Variables" enabled="false">
        <collectionProp name="Arguments.arguments">
          <elementProp name="timeout" elementType="Argument">
            <stringProp name="Argument.name">timeout</stringProp>
            <stringProp name="Argument.value">1000000</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Timeout Request</stringProp>
          </elementProp>
          <elementProp name="host" elementType="Argument">
            <stringProp name="Argument.name">host</stringProp>
            <stringProp name="Argument.value">qasa.capella.edu</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">stsa.capella.edu</stringProp>
          </elementProp>
          <elementProp name="port" elementType="Argument">
            <stringProp name="Argument.name">port</stringProp>
            <stringProp name="Argument.value">443</stringProp>
            <stringProp name="Argument.desc">443 for https</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="protocol" elementType="Argument">
            <stringProp name="Argument.name">protocol</stringProp>
            <stringProp name="Argument.value">https</stringProp>
            <stringProp name="Argument.desc">https</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="password" elementType="Argument">
            <stringProp name="Argument.name">password</stringProp>
            <stringProp name="Argument.value">W@terf@11</stringProp>
            <stringProp name="Argument.desc">Password-Sunsh!n3</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="node.min" elementType="Argument">
            <stringProp name="Argument.name">node.min</stringProp>
            <stringProp name="Argument.value">3</stringProp>
            <stringProp name="Argument.desc">3</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="node.max" elementType="Argument">
            <stringProp name="Argument.name">node.max</stringProp>
            <stringProp name="Argument.value">6</stringProp>
            <stringProp name="Argument.desc">6</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="environment" elementType="Argument">
            <stringProp name="Argument.name">environment</stringProp>
            <stringProp name="Argument.value">qa</stringProp>
            <stringProp name="Argument.desc">Environment</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="course_id_test_data" elementType="Argument">
            <stringProp name="Argument.name">course_id_test_data</stringProp>
            <stringProp name="Argument.value">_10421_1</stringProp>
            <stringProp name="Argument.desc">New Section in Test Data</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="courseTitle" elementType="Argument">
            <stringProp name="Argument.name">courseTitle</stringProp>
            <stringProp name="Argument.value">Perf MBA6247 Section</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Perf MBA6247 Section   </stringProp>
          </elementProp>
          <elementProp name="Encoding" elementType="Argument">
            <stringProp name="Argument.name">Encoding</stringProp>
            <stringProp name="Argument.value">UTF-8</stringProp>
            <stringProp name="Argument.desc">Content Encoding</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="ltihost" elementType="Argument">
            <stringProp name="Argument.name">ltihost</stringProp>
            <stringProp name="Argument.value">qalti.capella.edu</stringProp>
            <stringProp name="Argument.desc">qalti.capella.edu</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1426880700000</longProp>
        <longProp name="ThreadGroup.end_time">1426884300000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration">3600</stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${host}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.connect_timeout">${timeout}</stringProp>
          <stringProp name="HTTPSampler.response_timeout">${timeout}</stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path"></stringProp>
          <stringProp name="HTTPSampler.concurrentPool">4</stringProp>
        </ConfigTestElement>
        <hashTree/>
        <CacheManager guiclass="CacheManagerGui" testclass="CacheManager" testname="HTTP Cache Manager" enabled="true">
          <boolProp name="clearEachIteration">false</boolProp>
          <boolProp name="useExpires">true</boolProp>
        </CacheManager>
        <hashTree/>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
          <collectionProp name="CookieManager.cookies"/>
          <boolProp name="CookieManager.clearEachIteration">true</boolProp>
          <stringProp name="CookieManager.implementation">org.apache.jmeter.protocol.http.control.HC4CookieHandler</stringProp>
        </CookieManager>
        <hashTree/>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="Accept-Language" elementType="Header">
              <stringProp name="Header.name">Accept-Language</stringProp>
              <stringProp name="Header.value">en-us,en;q=0.5</stringProp>
            </elementProp>
            <elementProp name="Accept" elementType="Header">
              <stringProp name="Header.name">Accept</stringProp>
              <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
            </elementProp>
            <elementProp name="User-Agent" elementType="Header">
              <stringProp name="Header.name">User-Agent</stringProp>
              <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:33.0) Gecko/20100101 Firefox/33.0</stringProp>
            </elementProp>
            <elementProp name="Accept-Encoding" elementType="Header">
              <stringProp name="Header.name">Accept-Encoding</stringProp>
              <stringProp name="Header.value">gzip, deflate</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <ConstantThroughputTimer guiclass="TestBeanGUI" testclass="ConstantThroughputTimer" testname="Constant Throughput Timer" enabled="true">
          <doubleProp>
            <name>throughput</name>
            <value>150.0</value>
            <savedValue>0.0</savedValue>
          </doubleProp>
          <intProp name="calcMode">0</intProp>
        </ConstantThroughputTimer>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Pre-Login" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="goto" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">goto</stringProp>
                <stringProp name="Argument.value">https://${host}:443/</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${environment}sso${node.min}.capella.edu</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout">${timeout}</stringProp>
          <stringProp name="HTTPSampler.response_timeout">${timeout}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">${Encoding}</stringProp>
          <stringProp name="HTTPSampler.path">/openam/UI/Login</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.implementation">Java</stringProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Cookie Extractor" enabled="false">
            <stringProp name="RegexExtractor.useHeaders">true</stringProp>
            <stringProp name="RegexExtractor.refname">Auth-Cookie</stringProp>
            <stringProp name="RegexExtractor.regex">action=\&quot;/openam/UI/Login?AMAuthQACookie=(.+?)</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
            <stringProp name="Sample.scope">all</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Login" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="IDToken1" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">IDToken1</stringProp>
                <stringProp name="Argument.value">${username}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="IDToken2" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">IDToken2</stringProp>
                <stringProp name="Argument.value">${password}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="IDButton" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">IDButton</stringProp>
                <stringProp name="Argument.value">Log In</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="goto" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">goto</stringProp>
                <stringProp name="Argument.value">aHR0cHM6Ly9zdHNjLmNhcGVsbGEuZWR1OjQ0My8=</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="encoded" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">encoded</stringProp>
                <stringProp name="Argument.value">true</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="gx_charset" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">gx_charset</stringProp>
                <stringProp name="Argument.value">UTF-8</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="SunQueryParamsString" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">SunQueryParamsString</stringProp>
              </elementProp>
              <elementProp name="gotoOnFail" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">gotoOnFail</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${environment}sso${node.min}.capella.edu</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout">${timeout}</stringProp>
          <stringProp name="HTTPSampler.response_timeout">${timeout}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/openam/UI/Login</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="false">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-us,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 5.1; rv:13.0) Gecko/20100101 Firefox/13.0.1</stringProp>
              </elementProp>
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">https://stgsso3.capella.edu/openam/UI/Login?goto=https%3A%2F%2Fstsc.capella.edu%3A443%2F</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Success Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1503800107">Blackboard Learn</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="login_success Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">login_success_check</stringProp>
            <stringProp name="RegexExtractor.regex">Blackboard Learn&lt;/title&gt;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">No</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
            <stringProp name="Sample.scope">all</stringProp>
          </RegexExtractor>
          <hashTree/>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="User Config" enabled="true">
            <stringProp name="filename">ff_users_${environment}.csv</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="variableNames">role,emplId,username</stringProp>
            <stringProp name="delimiter">,</stringProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
          </CSVDataSet>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Tab Group Id Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">tab_group_id</stringProp>
            <stringProp name="RegexExtractor.regex">webapps\/portal\/execute\/topframe\?tab_tab_group_id=(.+?)\&amp;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">0</stringProp>
            <stringProp name="Sample.scope">all</stringProp>
          </RegexExtractor>
          <hashTree/>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Facutly Grading option" enabled="true">
            <stringProp name="filename">Grading_Option.txt</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="variableNames">grading</stringProp>
            <stringProp name="delimiter"></stringProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
          </CSVDataSet>
          <hashTree/>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Assignment Unit" enabled="true">
            <stringProp name="filename">test_SP14_Assignment_Unit.txt</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="variableNames">unitNumber</stringProp>
            <stringProp name="delimiter"></stringProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
          </CSVDataSet>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Login-QA" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="IDToken1" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">IDToken1</stringProp>
                <stringProp name="Argument.value">${username}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="IDToken2" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">IDToken2</stringProp>
                <stringProp name="Argument.value">${password}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="IDButton" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">IDButton</stringProp>
                <stringProp name="Argument.value">Log In</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="goto" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">goto</stringProp>
                <stringProp name="Argument.value">aHR0cHM${node.max}Ly9xYXNhLmNhcGVsbGEuZWR1OjQ0My8=</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="gotoOnFail" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">gotoOnFail</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="SunQueryParamsString" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">SunQueryParamsString</stringProp>
                <stringProp name="Argument.value">Z${node.min}hfY2hhcnNldD1VVEYtOA==</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="encoded" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">encoded</stringProp>
                <stringProp name="Argument.value">true</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="gx_charset" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">gx_charset</stringProp>
                <stringProp name="Argument.value">${Encoding}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${environment}sso${node.min}.capella.edu</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">${Encoding}</stringProp>
          <stringProp name="HTTPSampler.path">/openam/UI/Login</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="TestPlan.comments">Detected the start of a redirect chain</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="false">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 5.1; rv:${node.min}${node.min}.0) Gecko/20100101 Firefox/${node.min}${node.min}.0</stringProp>
              </elementProp>
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">${protocol}://${environment}sso${node.min}.capella.edu/openam/UI/Login?goto=${protocol}%${node.min}A%2F%2F${environment}sa.capella.edu%${node.min}A${port}%2F&amp;gx_charset=${Encoding}</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Success Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1503800107">Blackboard Learn</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="login_success Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">login_success_check</stringProp>
            <stringProp name="RegexExtractor.regex">Blackboard Learn&lt;/title&gt;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">No</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
            <stringProp name="Sample.scope">all</stringProp>
          </RegexExtractor>
          <hashTree/>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="User Config" enabled="true">
            <stringProp name="filename">ff_users_${environment}.csv</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="variableNames">role,emplId,username</stringProp>
            <stringProp name="delimiter">,</stringProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
          </CSVDataSet>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Tab Group Id Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">tab_group_id</stringProp>
            <stringProp name="RegexExtractor.regex">webapps/portal/execute/tabs/tabAction/?.tab_tab_group_id=(.+?)&quot;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">No Tabgroupid</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
            <stringProp name="Sample.scope">all</stringProp>
          </RegexExtractor>
          <hashTree/>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Facutly Grading option" enabled="false">
            <stringProp name="filename">Grading_Option.txt</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="variableNames">grading</stringProp>
            <stringProp name="delimiter"></stringProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
          </CSVDataSet>
          <hashTree/>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Assignment Unit" enabled="false">
            <stringProp name="filename">test_SP14_Assignment_Unit.txt</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="variableNames">unitNumber</stringProp>
            <stringProp name="delimiter"></stringProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
          </CSVDataSet>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Login-Stg" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="IDToken1" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">IDToken1</stringProp>
                <stringProp name="Argument.value">${username}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="IDToken2" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">IDToken2</stringProp>
                <stringProp name="Argument.value">${password}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="IDButton" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">IDButton</stringProp>
                <stringProp name="Argument.value">Log In</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="goto" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">goto</stringProp>
                <stringProp name="Argument.value">aHR0cHM6Ly9zdHNhLmNhcGVsbGEuZWR1OjQ0My8=</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="gotoOnFail" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">gotoOnFail</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="SunQueryParamsString" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">SunQueryParamsString</stringProp>
                <stringProp name="Argument.value">Z${node.min}hfY2hhcnNldD1VVEYtOA==</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="encoded" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">encoded</stringProp>
                <stringProp name="Argument.value">true</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="gx_charset" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">gx_charset</stringProp>
                <stringProp name="Argument.value">${Encoding}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${environment}sso${node.min}.capella.edu</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">${Encoding}</stringProp>
          <stringProp name="HTTPSampler.path">/openam/UI/Login</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.implementation">Java</stringProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="TestPlan.comments">Detected the start of a redirect chain</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="false">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 5.1; rv:${node.min}${node.min}.0) Gecko/20100101 Firefox/${node.min}${node.min}.0</stringProp>
              </elementProp>
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">${protocol}://${environment}sso${node.min}.capella.edu/openam/UI/Login?goto=${protocol}%${node.min}A%2F%2F${environment}sa.capella.edu%${node.min}A${port}%2F&amp;gx_charset=${Encoding}</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Success Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1503800107">Blackboard Learn</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="login_success Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">login_success_check</stringProp>
            <stringProp name="RegexExtractor.regex">Blackboard Learn&lt;/title&gt;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">No</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
            <stringProp name="Sample.scope">all</stringProp>
          </RegexExtractor>
          <hashTree/>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="User Config" enabled="true">
            <stringProp name="filename">ff_users_${environment}.csv</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="variableNames">role,emplId,username</stringProp>
            <stringProp name="delimiter">,</stringProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
            <stringProp name="TestPlan.comments">/opt/caweb/jmeter/testfiles/</stringProp>
          </CSVDataSet>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Tab Group Id Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">tab_group_id</stringProp>
            <stringProp name="RegexExtractor.regex">webapps/portal/execute/tabs/tabAction/?.tab_tab_group_id=(.+?)&quot;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">No Tabgroupid</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
            <stringProp name="Sample.scope">all</stringProp>
          </RegexExtractor>
          <hashTree/>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Facutly Grading option" enabled="false">
            <stringProp name="filename">Grading_Option.txt</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="variableNames">grading</stringProp>
            <stringProp name="delimiter"></stringProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
          </CSVDataSet>
          <hashTree/>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Assignment Unit" enabled="false">
            <stringProp name="filename">test_SP14_Assignment_Unit.txt</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="variableNames">unitNumber</stringProp>
            <stringProp name="delimiter"></stringProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
          </CSVDataSet>
          <hashTree/>
        </hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="Login Success Transaction" enabled="true">
          <stringProp name="IfController.condition">${login_success_check}!=&apos;No&apos;</stringProp>
          <boolProp name="IfController.evaluateAll">true</boolProp>
        </IfController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Home Page" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="tab_tab_group_id" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">tab_tab_group_id</stringProp>
                  <stringProp name="Argument.value">${tab_group_id}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="frameSize" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">LARGE</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">frameSize</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout">${timeout}</stringProp>
            <stringProp name="HTTPSampler.response_timeout">${timeout}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/webapps/portal/execute/tabs/tabAction</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="false">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-us,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 5.1; rv:13.0) Gecko/20100101 Firefox/13.0.1</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://stsc.capella.edu/webapps/portal/frameset.jsp</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Success Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-658416060">Blackboard Learn&lt;/title&gt;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Course Mod ID Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">course_mod_id</stringProp>
              <stringProp name="RegexExtractor.regex">&lt;div class=&quot;portlet clearfix  &quot; id=&quot;module:(.+?)&quot;&gt;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">2</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Announcement Mod ID Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">announcement_mod_id</stringProp>
              <stringProp name="RegexExtractor.regex">&lt;div class=&quot;portlet clearfix  &quot; id=&quot;module:(.+?)&quot;&gt;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Tab ID Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
              <stringProp name="RegexExtractor.refname">tab_id</stringProp>
              <stringProp name="RegexExtractor.regex">\&amp;tabId=(.+?)\&amp;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HomePage-CourseList" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="action" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">action</stringProp>
                  <stringProp name="Argument.value">refreshAjaxModule</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="modId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">modId</stringProp>
                  <stringProp name="Argument.value">${course_mod_id}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="tabId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">tabId</stringProp>
                  <stringProp name="Argument.value">${tab_id}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="tab_tab_group_id" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">tab_tab_group_id</stringProp>
                  <stringProp name="Argument.value">${tab_group_id}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout">${timeout}</stringProp>
            <stringProp name="HTTPSampler.response_timeout">${timeout}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/webapps/portal/execute/tabs/tabAction</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="false">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-us,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/javascript, text/html, application/xml, text/xml, */*</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 5.1; rv:13.0) Gecko/20100101 Firefox/13.0.1</stringProp>
                </elementProp>
                <elementProp name="Pragma" elementType="Header">
                  <stringProp name="Header.name">Pragma</stringProp>
                  <stringProp name="Header.value">no-cache</stringProp>
                </elementProp>
                <elementProp name="Cache-Control" elementType="Header">
                  <stringProp name="Header.name">Cache-Control</stringProp>
                  <stringProp name="Header.value">no-cache</stringProp>
                </elementProp>
                <elementProp name="X-Prototype-Version" elementType="Header">
                  <stringProp name="Header.name">X-Prototype-Version</stringProp>
                  <stringProp name="Header.value">1.7</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://stsc.capella.edu/webapps/portal/execute/tabs/tabAction?tab_tab_group_id=_2_1</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Success Assertion" enabled="false">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="520654381">All of your courses are hidden.</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="learner Identification" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">learner_check</stringProp>
              <stringProp name="RegexExtractor.regex">Courses where you are: Learner</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NO</stringProp>
              <stringProp name="RegexExtractor.match_number">0</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="faculty Identification" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">faculty_check</stringProp>
              <stringProp name="RegexExtractor.regex">Courses where you are: Primary</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NO</stringProp>
              <stringProp name="RegexExtractor.match_number">0</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Flexpath Course ID Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">flex_path_course</stringProp>
              <stringProp name="RegexExtractor.regex">type=Course&amp;id=(.+?)&amp;url=&quot; target=&quot;_top&quot;&gt;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">No FP</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Success Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Flex Path Courses" enabled="true">
            <stringProp name="IfController.condition">&quot;${flex_path_course}&quot;!=&quot;No FP&quot;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <stringProp name="TestPlan.comments">${__javaScript(&quot;${flex_path_course}&quot;!=&quot;No FP&quot;)} </stringProp>
          </IfController>
          <hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Learner" enabled="true">
              <stringProp name="IfController.condition">&quot;${role}&quot;==&quot;Learner&quot;</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CourseMainPage" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="course_id" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">course_id</stringProp>
                      <stringProp name="Argument.value">${flex_path_course}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="task" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">task</stringProp>
                      <stringProp name="Argument.value">true</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="src" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">src</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${host}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout">${timeout}</stringProp>
                <stringProp name="HTTPSampler.response_timeout">${timeout}</stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/webapps/blackboard/content/listContent.jsp</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.implementation">Java</stringProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="false">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Accept-Language" elementType="Header">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-us,en;q=0.5</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                    </elementProp>
                    <elementProp name="User-Agent" elementType="Header">
                      <stringProp name="Header.name">User-Agent</stringProp>
                      <stringProp name="Header.value">Mozilla/5.0 (Windows NT 5.1; rv:13.0) Gecko/20100101 Firefox/13.0.1</stringProp>
                    </elementProp>
                    <elementProp name="Referer" elementType="Header">
                      <stringProp name="Header.name">Referer</stringProp>
                      <stringProp name="Header.value">https://stsc.capella.edu/webapps/portal/execute/tabs/tabAction?tab_tab_group_id=_2_1</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Encoding" elementType="Header">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Home" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">home</stringProp>
                  <stringProp name="RegexExtractor.regex">course_id=(.+?)&amp;content_id=(.+?)&amp;mode=reset&quot; target=&quot;_self&quot;&gt;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$2$</stringProp>
                  <stringProp name="RegexExtractor.default">No Home</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                  <stringProp name="TestPlan.comments">listcontent.jsp/?.course_id=(.+?)&amp;content_id=(.+?)&amp;mode=reset&quot; target=&quot;_self&quot;&gt;</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Syllabus" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">getsyllabus</stringProp>
                  <stringProp name="RegexExtractor.regex">course_id=(.+?)&amp;content_id=(.+?)&amp;mode=reset&quot; target=&quot;_self&quot;&gt;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$2$</stringProp>
                  <stringProp name="RegexExtractor.default">No syllabus</stringProp>
                  <stringProp name="RegexExtractor.match_number">2</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Courseprogress" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">courseprogress</stringProp>
                  <stringProp name="RegexExtractor.regex">course_id=(.+?)&amp;tool_id=(.+?)&amp;tool_type=TOOL&amp;mode=view&amp;mode=reset&quot; target=&quot;_self&quot;&gt;&lt;span title=&quot;My Course Progress&quot;&gt;My Course Progress&lt;/span&gt;&lt;/a&gt;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$2$</stringProp>
                  <stringProp name="RegexExtractor.default">No Courseprogress</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Assessment1" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">Assessment1</stringProp>
                  <stringProp name="RegexExtractor.regex">course_id=(.+?)&amp;content_id=(.+?)&amp;mode=reset&quot; target=&quot;_self&quot;&gt;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$2$</stringProp>
                  <stringProp name="RegexExtractor.default">No Assessment1</stringProp>
                  <stringProp name="RegexExtractor.match_number">3</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Assessment2" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">as_document</stringProp>
                  <stringProp name="RegexExtractor.refname">Assessment2</stringProp>
                  <stringProp name="RegexExtractor.regex">course_id=(.+?)&amp;content_id=(.+?)&amp;mode=reset&quot; target=&quot;_self&quot;&gt;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$2$</stringProp>
                  <stringProp name="RegexExtractor.default">No Assessment2</stringProp>
                  <stringProp name="RegexExtractor.match_number">4</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Assessment3" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">as_document</stringProp>
                  <stringProp name="RegexExtractor.refname">Assessment3</stringProp>
                  <stringProp name="RegexExtractor.regex">course_id=(.+?)&amp;content_id=(.+?)&amp;mode=reset&quot; target=&quot;_self&quot;&gt;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$2$</stringProp>
                  <stringProp name="RegexExtractor.default">No Assessment3</stringProp>
                  <stringProp name="RegexExtractor.match_number">5</stringProp>
                </RegexExtractor>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Success Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="2255103">Home</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="appviewcontent" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">as_document</stringProp>
                  <stringProp name="RegexExtractor.refname">appviewcontent</stringProp>
                  <stringProp name="RegexExtractor.regex">app/view?.course_id=(.+?)&amp;content_id=(.+?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$2$</stringProp>
                  <stringProp name="RegexExtractor.default">No appviewcontent</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="coursetitilename" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">as_document</stringProp>
                  <stringProp name="RegexExtractor.refname">coursetitilename</stringProp>
                  <stringProp name="RegexExtractor.regex">courseMain?.course_id=(.+?)&quot;  title=&quot;(.+?)&quot;&gt;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$2$</stringProp>
                  <stringProp name="RegexExtractor.default">No coursetitilename</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Timeline Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-766773282">Course Overview</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assessment Assertion" enabled="false">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="1888761572">Assessment Details</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Academic Assertion" enabled="false">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="2004362710">Academic Team</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Course Exists" enabled="true">
                <stringProp name="IfController.condition">${__javaScript(&quot;${getsyllabus}&quot;!=&quot;No syllabus&quot;)}</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Course Home" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="course_id" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">course_id</stringProp>
                        <stringProp name="Argument.value">${flex_path_course}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="content_id" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">content_id</stringProp>
                        <stringProp name="Argument.value">${home_g2}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="mode" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">mode</stringProp>
                        <stringProp name="Argument.value">reset</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${host}</stringProp>
                  <stringProp name="HTTPSampler.port">${port}</stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">${Encoding}</stringProp>
                  <stringProp name="HTTPSampler.path">/webapps/blackboard/content/listContent.jsp</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.implementation">Java</stringProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="false">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Accept-Language" elementType="Header">
                        <stringProp name="Header.name">Accept-Language</stringProp>
                        <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                      </elementProp>
                      <elementProp name="Accept" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                      </elementProp>
                      <elementProp name="User-Agent" elementType="Header">
                        <stringProp name="Header.name">User-Agent</stringProp>
                        <stringProp name="Header.value">Mozilla/5.0 (Windows NT 5.1; rv:${node.min}${node.min}.0) Gecko/20100101 Firefox/${node.min}${node.min}.0</stringProp>
                      </elementProp>
                      <elementProp name="Referer" elementType="Header">
                        <stringProp name="Header.name">Referer</stringProp>
                        <stringProp name="Header.value">${protocol}://${environment}sa.capella.edu/webapps/blackboard/content/listContent.jsp?course_id=_2041${node.max}_1&amp;content_id=_2029792_1&amp;mode=reset</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Encoding" elementType="Header">
                        <stringProp name="Header.name">Accept-Encoding</stringProp>
                        <stringProp name="Header.value">gzip, deflate</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Success Assertion" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="1439918428">coursetimeline</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">2</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get My course progress - TargetDates " enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${host}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout">${timeout}</stringProp>
                  <stringProp name="HTTPSampler.response_timeout">${timeout}</stringProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/webapps/blackboard/content/launchLink.jsp?course_id=${flex_path_course}&amp;tool_id=_2623_1&amp;tool_type=TOOL&amp;mode=view&amp;mode=reset</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.implementation">Java</stringProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="false">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Accept-Language" elementType="Header">
                        <stringProp name="Header.name">Accept-Language</stringProp>
                        <stringProp name="Header.value">en-us,en;q=0.5</stringProp>
                      </elementProp>
                      <elementProp name="Accept" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                      </elementProp>
                      <elementProp name="User-Agent" elementType="Header">
                        <stringProp name="Header.name">User-Agent</stringProp>
                        <stringProp name="Header.value">Mozilla/5.0 (Windows NT 5.1; rv:13.0) Gecko/20100101 Firefox/13.0.1</stringProp>
                      </elementProp>
                      <elementProp name="Referer" elementType="Header">
                        <stringProp name="Header.name">Referer</stringProp>
                        <stringProp name="Header.value">https://stsc.capella.edu/webapps/portal/execute/tabs/tabAction?tab_tab_group_id=_2_1</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Encoding" elementType="Header">
                        <stringProp name="Header.name">Accept-Encoding</stringProp>
                        <stringProp name="Header.value">gzip, deflate</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Success Assertion" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="-378635714">My Course Progress</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">2</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="PCCPId" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">as_document</stringProp>
                    <stringProp name="RegexExtractor.refname">pccpId</stringProp>
                    <stringProp name="RegexExtractor.regex">pccpId&quot; type=&quot;hidden&quot; value=&quot;(.+?)&quot;/&gt;</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">No pccpId</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                    <stringProp name="TestPlan.comments">course_id=(.+?)&amp;content_id=(.+?)&amp;mode=reset&quot; target=&quot;_self&quot;&gt; </stringProp>
                  </RegexExtractor>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="assignmentId0" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">as_document</stringProp>
                    <stringProp name="RegexExtractor.refname">assignmentId0</stringProp>
                    <stringProp name="RegexExtractor.regex">assignmentId&quot; type=&quot;hidden&quot; value=&quot;(.+?)&quot;</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">No AssignmentId</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                    <stringProp name="TestPlan.comments">course_id=(.+?)&amp;content_id=(.+?)&amp;mode=reset&quot; target=&quot;_self&quot;&gt;  </stringProp>
                  </RegexExtractor>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="assignmentId1" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">as_document</stringProp>
                    <stringProp name="RegexExtractor.refname">assignmentId1</stringProp>
                    <stringProp name="RegexExtractor.regex">assignmentId&quot; type=&quot;hidden&quot; value=&quot;(.+?)&quot;</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">No AssignmentId1</stringProp>
                    <stringProp name="RegexExtractor.match_number">2</stringProp>
                    <stringProp name="TestPlan.comments">course_id=(.+?)&amp;content_id=(.+?)&amp;mode=reset&quot; target=&quot;_self&quot;&gt;  </stringProp>
                  </RegexExtractor>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="assignmentId2" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">as_document</stringProp>
                    <stringProp name="RegexExtractor.refname">assignmentId2</stringProp>
                    <stringProp name="RegexExtractor.regex">assignmentId&quot; type=&quot;hidden&quot; value=&quot;(.+?)&quot;</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">No AssignmentId2</stringProp>
                    <stringProp name="RegexExtractor.match_number">3</stringProp>
                    <stringProp name="TestPlan.comments">course_id=(.+?)&amp;content_id=(.+?)&amp;mode=reset&quot; target=&quot;_self&quot;&gt;  </stringProp>
                  </RegexExtractor>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="assignmentId3" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">as_document</stringProp>
                    <stringProp name="RegexExtractor.refname">assignmentId3</stringProp>
                    <stringProp name="RegexExtractor.regex">assignmentId&quot; type=&quot;hidden&quot; value=&quot;(.+?)&quot;</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">No AssignmentId3</stringProp>
                    <stringProp name="RegexExtractor.match_number">4</stringProp>
                    <stringProp name="TestPlan.comments">course_id=(.+?)&amp;content_id=(.+?)&amp;mode=reset&quot; target=&quot;_self&quot;&gt;  </stringProp>
                  </RegexExtractor>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="assignmentId4" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">as_document</stringProp>
                    <stringProp name="RegexExtractor.refname">assignmentId4</stringProp>
                    <stringProp name="RegexExtractor.regex">assignmentId&quot; type=&quot;hidden&quot; value=&quot;(.+?)&quot;</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">No AssignmentId4</stringProp>
                    <stringProp name="RegexExtractor.match_number">5</stringProp>
                    <stringProp name="TestPlan.comments">course_id=(.+?)&amp;content_id=(.+?)&amp;mode=reset&quot; target=&quot;_self&quot;&gt;  </stringProp>
                  </RegexExtractor>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="assignmentname0" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">as_document</stringProp>
                    <stringProp name="RegexExtractor.refname">assignmentname0</stringProp>
                    <stringProp name="RegexExtractor.regex">assignmentName&quot; type=&quot;hidden&quot; value=&quot;(.+?)&quot;</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">No Assignmentname0</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                    <stringProp name="TestPlan.comments">course_id=(.+?)&amp;content_id=(.+?)&amp;mode=reset&quot; target=&quot;_self&quot;&gt;  </stringProp>
                  </RegexExtractor>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="assignmentname1" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">as_document</stringProp>
                    <stringProp name="RegexExtractor.refname">assignmentname1</stringProp>
                    <stringProp name="RegexExtractor.regex">assignmentName&quot; type=&quot;hidden&quot; value=&quot;(.+?)&quot;</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">No Assignmentname1</stringProp>
                    <stringProp name="RegexExtractor.match_number">2</stringProp>
                    <stringProp name="TestPlan.comments">course_id=(.+?)&amp;content_id=(.+?)&amp;mode=reset&quot; target=&quot;_self&quot;&gt;  </stringProp>
                  </RegexExtractor>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="assignmentname2" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">as_document</stringProp>
                    <stringProp name="RegexExtractor.refname">assignmentname2</stringProp>
                    <stringProp name="RegexExtractor.regex">assignmentName&quot; type=&quot;hidden&quot; value=&quot;(.+?)&quot;</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">No Assignmentname2</stringProp>
                    <stringProp name="RegexExtractor.match_number">3</stringProp>
                    <stringProp name="TestPlan.comments">course_id=(.+?)&amp;content_id=(.+?)&amp;mode=reset&quot; target=&quot;_self&quot;&gt;  </stringProp>
                  </RegexExtractor>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="assignmentname3" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">as_document</stringProp>
                    <stringProp name="RegexExtractor.refname">assignmentname3</stringProp>
                    <stringProp name="RegexExtractor.regex">assignmentName&quot; type=&quot;hidden&quot; value=&quot;(.+?)&quot;</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">No Assignmentname3</stringProp>
                    <stringProp name="RegexExtractor.match_number">4</stringProp>
                    <stringProp name="TestPlan.comments">course_id=(.+?)&amp;content_id=(.+?)&amp;mode=reset&quot; target=&quot;_self&quot;&gt;  </stringProp>
                  </RegexExtractor>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="assignmentname4" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">as_document</stringProp>
                    <stringProp name="RegexExtractor.refname">assignmentname4</stringProp>
                    <stringProp name="RegexExtractor.regex">assignmentName&quot; type=&quot;hidden&quot; value=&quot;(.+?)&quot;</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">No Assignmentname4</stringProp>
                    <stringProp name="RegexExtractor.match_number">5</stringProp>
                    <stringProp name="TestPlan.comments">course_id=(.+?)&amp;content_id=(.+?)&amp;mode=reset&quot; target=&quot;_self&quot;&gt;  </stringProp>
                  </RegexExtractor>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="coursestartdate" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">as_document</stringProp>
                    <stringProp name="RegexExtractor.refname">coursestartdate</stringProp>
                    <stringProp name="RegexExtractor.regex">courseStartDate&quot; type=&quot;hidden&quot; value=&quot;(.+?)&quot;/&gt;</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">No coursestartdate</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                    <stringProp name="TestPlan.comments">course_id=(.+?)&amp;content_id=(.+?)&amp;mode=reset&quot; target=&quot;_self&quot;&gt;  </stringProp>
                  </RegexExtractor>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="courseenddate" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">as_document</stringProp>
                    <stringProp name="RegexExtractor.refname">courseenddate</stringProp>
                    <stringProp name="RegexExtractor.regex">courseenddate&quot; type=&quot;hidden&quot; value=&quot;(.+?)&quot;/&gt;</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">No courseenddate</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                    <stringProp name="TestPlan.comments">course_id=(.+?)&amp;content_id=(.+?)&amp;mode=reset&quot; target=&quot;_self&quot;&gt;  </stringProp>
                  </RegexExtractor>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="assignmentStatus0" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">as_document</stringProp>
                    <stringProp name="RegexExtractor.refname">assignmentStatus0</stringProp>
                    <stringProp name="RegexExtractor.regex">assignmentStatus&quot; type=&quot;hidden&quot; value=&quot;(.+?)&quot;/&gt;</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">No assignmentStatus0</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                    <stringProp name="TestPlan.comments">course_id=(.+?)&amp;content_id=(.+?)&amp;mode=reset&quot; target=&quot;_self&quot;&gt;  </stringProp>
                  </RegexExtractor>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="assignmentStatus1" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">as_document</stringProp>
                    <stringProp name="RegexExtractor.refname">assignmentStatus1</stringProp>
                    <stringProp name="RegexExtractor.regex">assignmentStatus&quot; type=&quot;hidden&quot; value=&quot;(.+?)&quot;/&gt;</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">No assignmentStatus1</stringProp>
                    <stringProp name="RegexExtractor.match_number">2</stringProp>
                    <stringProp name="TestPlan.comments">course_id=(.+?)&amp;content_id=(.+?)&amp;mode=reset&quot; target=&quot;_self&quot;&gt;  </stringProp>
                  </RegexExtractor>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="assignmentStatus2" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">as_document</stringProp>
                    <stringProp name="RegexExtractor.refname">assignmentStatus2</stringProp>
                    <stringProp name="RegexExtractor.regex">assignmentStatus&quot; type=&quot;hidden&quot; value=&quot;(.+?)&quot;/&gt;</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">No assignmentStatus2</stringProp>
                    <stringProp name="RegexExtractor.match_number">3</stringProp>
                    <stringProp name="TestPlan.comments">course_id=(.+?)&amp;content_id=(.+?)&amp;mode=reset&quot; target=&quot;_self&quot;&gt;  </stringProp>
                  </RegexExtractor>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="assignmentStatus3" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">as_document</stringProp>
                    <stringProp name="RegexExtractor.refname">assignmentStatus3</stringProp>
                    <stringProp name="RegexExtractor.regex">assignmentStatus&quot; type=&quot;hidden&quot; value=&quot;(.+?)&quot;/&gt;</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">No assignmentStatus3</stringProp>
                    <stringProp name="RegexExtractor.match_number">4</stringProp>
                    <stringProp name="TestPlan.comments">course_id=(.+?)&amp;content_id=(.+?)&amp;mode=reset&quot; target=&quot;_self&quot;&gt;  </stringProp>
                  </RegexExtractor>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="assignmentStatus4" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">as_document</stringProp>
                    <stringProp name="RegexExtractor.refname">assignmentStatus4</stringProp>
                    <stringProp name="RegexExtractor.regex">assignmentStatus&quot; type=&quot;hidden&quot; value=&quot;(.+?)&quot;/&gt;</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">No assignmentStatus4</stringProp>
                    <stringProp name="RegexExtractor.match_number">5</stringProp>
                    <stringProp name="TestPlan.comments">course_id=(.+?)&amp;content_id=(.+?)&amp;mode=reset&quot; target=&quot;_self&quot;&gt;  </stringProp>
                  </RegexExtractor>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="useremailid" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">as_document</stringProp>
                    <stringProp name="RegexExtractor.refname">useremailid</stringProp>
                    <stringProp name="RegexExtractor.regex">&quot;userEmailId&quot; type=&quot;hidden&quot; value=&quot;(.+?)&quot;/&gt;</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">No useremailid</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                    <stringProp name="TestPlan.comments">course_id=(.+?)&amp;content_id=(.+?)&amp;mode=reset&quot; target=&quot;_self&quot;&gt;  </stringProp>
                  </RegexExtractor>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="useruuid" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">as_document</stringProp>
                    <stringProp name="RegexExtractor.refname">useruuid</stringProp>
                    <stringProp name="RegexExtractor.regex">&quot;userUUID&quot; type=&quot;hidden&quot; value=&quot;(.+?)&quot;/&gt;</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">No useruuid</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                    <stringProp name="TestPlan.comments">course_id=(.+?)&amp;content_id=(.+?)&amp;mode=reset&quot; target=&quot;_self&quot;&gt;  </stringProp>
                  </RegexExtractor>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="firstname" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">as_document</stringProp>
                    <stringProp name="RegexExtractor.refname">firstname</stringProp>
                    <stringProp name="RegexExtractor.regex">name=&quot;userFirstName&quot; type=&quot;hidden&quot; value=&quot;(.+?)&quot;/&gt;</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">No useruuid</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                    <stringProp name="TestPlan.comments">course_id=(.+?)&amp;content_id=(.+?)&amp;mode=reset&quot; target=&quot;_self&quot;&gt;  </stringProp>
                  </RegexExtractor>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="lastname" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">as_document</stringProp>
                    <stringProp name="RegexExtractor.refname">lastname</stringProp>
                    <stringProp name="RegexExtractor.regex">name=&quot;userLastName&quot; type=&quot;hidden&quot; value=&quot;(.+?)&quot;/&gt;</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">No useruuid</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                    <stringProp name="TestPlan.comments">course_id=(.+?)&amp;content_id=(.+?)&amp;mode=reset&quot; target=&quot;_self&quot;&gt;  </stringProp>
                  </RegexExtractor>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="studentid" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">as_document</stringProp>
                    <stringProp name="RegexExtractor.refname">studentid</stringProp>
                    <stringProp name="RegexExtractor.regex">name=&quot;studentId&quot; type=&quot;hidden&quot; value=&quot;(.+?)&quot;/&gt;</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">No useruuid</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                    <stringProp name="TestPlan.comments">course_id=(.+?)&amp;content_id=(.+?)&amp;mode=reset&quot; target=&quot;_self&quot;&gt;  </stringProp>
                  </RegexExtractor>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="userid" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">as_document</stringProp>
                    <stringProp name="RegexExtractor.refname">userid</stringProp>
                    <stringProp name="RegexExtractor.regex">name=&quot;userId&quot; type=&quot;hidden&quot; value=&quot;(.+?)&quot;/&gt;</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">No useruuid</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                    <stringProp name="TestPlan.comments">course_id=(.+?)&amp;content_id=(.+?)&amp;mode=reset&quot; target=&quot;_self&quot;&gt;  </stringProp>
                  </RegexExtractor>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="coursetitle" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">as_document</stringProp>
                    <stringProp name="RegexExtractor.refname">coursetitle</stringProp>
                    <stringProp name="RegexExtractor.regex">name=&quot;courseTitle&quot; type=&quot;hidden&quot; value=&quot;(.+?)&quot;/&gt;</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">No coursetitle</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                    <stringProp name="TestPlan.comments">course_id=(.+?)&amp;content_id=(.+?)&amp;mode=reset&quot; target=&quot;_self&quot;&gt;  </stringProp>
                  </RegexExtractor>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="numberOfWeeksCompleted" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">as_document</stringProp>
                    <stringProp name="RegexExtractor.refname">numberOfWeeksCompleted</stringProp>
                    <stringProp name="RegexExtractor.regex">name=&quot;numberOfWeeksCompleted&quot; type=&quot;hidden&quot; value=&quot;(.+?)&quot;/&gt;</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">No numberOfWeeksCompleted</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                    <stringProp name="TestPlan.comments">course_id=(.+?)&amp;content_id=(.+?)&amp;mode=reset&quot; target=&quot;_self&quot;&gt;  </stringProp>
                  </RegexExtractor>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="completeCourseBtnStatus" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">as_document</stringProp>
                    <stringProp name="RegexExtractor.refname">completeCourseBtnStatus</stringProp>
                    <stringProp name="RegexExtractor.regex">name=&quot;completeCourseBtnStatus&quot; type=&quot;hidden&quot; value=&quot;(.+?)&quot;/&gt;</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">No completeCourseBtnStatus</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                    <stringProp name="TestPlan.comments">course_id=(.+?)&amp;content_id=(.+?)&amp;mode=reset&quot; target=&quot;_self&quot;&gt;  </stringProp>
                  </RegexExtractor>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="employeeId" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">as_document</stringProp>
                    <stringProp name="RegexExtractor.refname">employeeId</stringProp>
                    <stringProp name="RegexExtractor.regex">name=&quot;employeeId&quot; type=&quot;hidden&quot; value=&quot;(.+?)&quot;/&gt;</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">No employeeId</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                    <stringProp name="TestPlan.comments">course_id=(.+?)&amp;content_id=(.+?)&amp;mode=reset&quot; target=&quot;_self&quot;&gt;  </stringProp>
                  </RegexExtractor>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="externalcoursekey" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">as_document</stringProp>
                    <stringProp name="RegexExtractor.refname">externalcoursekey</stringProp>
                    <stringProp name="RegexExtractor.regex">&quot;MBA-FP6026_(.+?)&quot;</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">No externalcoursekey</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                    <stringProp name="TestPlan.comments">course_id=(.+?)&amp;content_id=(.+?)&amp;mode=reset&quot; target=&quot;_self&quot;&gt;  </stringProp>
                  </RegexExtractor>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Course TimeLine" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="context_id" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">context_id</stringProp>
                        <stringProp name="Argument.value">${flex_path_course}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="context_label" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">context_label</stringProp>
                        <stringProp name="Argument.value">${coursetitle}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="context_title" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">context_title</stringProp>
                        <stringProp name="Argument.value">${coursetitilename_g2}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="custom_content_primary_key_identifier" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${appviewcontent_g2}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">custom_content_primary_key_identifier</stringProp>
                      </elementProp>
                      <elementProp name="custom_content_url" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">/courses/1/${coursetitle}/content/${appviewcontent_g2}/</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">custom_content_url</stringProp>
                      </elementProp>
                      <elementProp name="custom_course_course_id" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${coursetitle}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">custom_course_course_id</stringProp>
                      </elementProp>
                      <elementProp name="custom_course_external_course_key" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${extCourseKey}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">custom_course_external_course_key</stringProp>
                      </elementProp>
                      <elementProp name="custom_course_locale" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">@X@course.locale@X@</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">custom_course_locale</stringProp>
                      </elementProp>
                      <elementProp name="custom_course_membership_role_id" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">S</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">custom_course_membership_role_id</stringProp>
                      </elementProp>
                      <elementProp name="custom_course_name" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${coursetitilename_g2}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">custom_course_name</stringProp>
                      </elementProp>
                      <elementProp name="custom_course_primary_key" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${flex_path_course}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">custom_course_primary_key</stringProp>
                      </elementProp>
                      <elementProp name="custom_course_primary_key_identifier" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${flex_path_course}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">custom_course_primary_key_identifier</stringProp>
                      </elementProp>
                      <elementProp name="custom_course_url" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">/courses/1/${coursetitle}/</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">custom_course_url</stringProp>
                      </elementProp>
                      <elementProp name="custom_pccp_toollink_id" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${courseprogress_g2}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">custom_pccp_toollink_id</stringProp>
                      </elementProp>
                      <elementProp name="custom_request_locale" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">@X@request.locale@X@</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">custom_request_locale</stringProp>
                      </elementProp>
                      <elementProp name="custom_request_return_url" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">@X@request.return@X@</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">custom_request_return_url</stringProp>
                      </elementProp>
                      <elementProp name="custom_requestuuid" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">@X@request.id@X@</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">custom_requestuuid</stringProp>
                      </elementProp>
                      <elementProp name="custom_system_host_name" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${host}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">custom_system_host_name</stringProp>
                      </elementProp>
                      <elementProp name="custom_user_external_person_key" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${studentid}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">custom_user_external_person_key</stringProp>
                      </elementProp>
                      <elementProp name="custom_user_full_name" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value"> ${firstname}  ${lastname}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">custom_user_full_name</stringProp>
                      </elementProp>
                      <elementProp name="custom_user_locale" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">en_US</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">custom_user_locale</stringProp>
                      </elementProp>
                      <elementProp name="custom_user_primary_institution_role" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">STUDENT</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">custom_user_primary_institution_role</stringProp>
                      </elementProp>
                      <elementProp name="custom_user_primary_key" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">_${userid}_1</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">custom_user_primary_key</stringProp>
                      </elementProp>
                      <elementProp name="custom_user_primary_key_identifier" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">_${userid}_1</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">custom_user_primary_key_identifier</stringProp>
                      </elementProp>
                      <elementProp name="custom_user_secondary_institution_roles" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">custom_user_secondary_institution_roles</stringProp>
                      </elementProp>
                      <elementProp name="custom_user_system_roles" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">N</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">custom_user_system_roles</stringProp>
                      </elementProp>
                      <elementProp name="custom_user_username" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${username}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">custom_user_username</stringProp>
                      </elementProp>
                      <elementProp name="ext_launch_presentation_css_url" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">https://${host}/common/shared.css,https://${host}/branding/themes/as_2012_capella_oct14_088/theme.css</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">ext_launch_presentation_css_url</stringProp>
                      </elementProp>
                      <elementProp name="ext_lms" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">bb-9.1.201410.160373</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">ext_lms</stringProp>
                      </elementProp>
                      <elementProp name="launch_presentation_locale" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">en-US-CR30-V1-M</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">launch_presentation_locale</stringProp>
                      </elementProp>
                      <elementProp name="lis_person_contact_email_primary" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${useremailid_g1}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">lis_person_contact_email_primary</stringProp>
                      </elementProp>
                      <elementProp name="lis_person_name_family" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${lastname}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">lis_person_name_family</stringProp>
                      </elementProp>
                      <elementProp name="lis_person_name_full" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value"> ${firstname}  ${lastname}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">lis_person_name_full</stringProp>
                      </elementProp>
                      <elementProp name="lis_person_name_given" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${firstname}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">lis_person_name_given</stringProp>
                      </elementProp>
                      <elementProp name="lti_message_type" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">basic-lti-launch-request</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">lti_message_type</stringProp>
                      </elementProp>
                      <elementProp name="lti_version" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">LTI-1p0</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">lti_version</stringProp>
                      </elementProp>
                      <elementProp name="oauth_callback" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">about:blank</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">oauth_callback</stringProp>
                      </elementProp>
                      <elementProp name="oauth_consumer_key" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">C@pell@bB9</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">oauth_consumer_key</stringProp>
                      </elementProp>
                      <elementProp name="oauth_nonce" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${var_oauth_nonce}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">oauth_nonce</stringProp>
                      </elementProp>
                      <elementProp name="oauth_signature" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${outhSignature}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">oauth_signature</stringProp>
                      </elementProp>
                      <elementProp name="oauth_signature_method" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">HMAC-SHA1</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">oauth_signature_method</stringProp>
                      </elementProp>
                      <elementProp name="oauth_timestamp" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${var_timestamp}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">oauth_timestamp</stringProp>
                      </elementProp>
                      <elementProp name="oauth_version" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">1.0</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">oauth_version</stringProp>
                      </elementProp>
                      <elementProp name="resource_link_id" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${appviewcontent_g2}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">resource_link_id</stringProp>
                      </elementProp>
                      <elementProp name="roles" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">urn:lti:role:ims/lis/Learner</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">roles</stringProp>
                      </elementProp>
                      <elementProp name="tool_consumer_instance_contact_email" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">courseroom.admin@capella.edu</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">tool_consumer_instance_contact_email</stringProp>
                      </elementProp>
                      <elementProp name="tool_consumer_instance_guid" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${useruuid}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">tool_consumer_instance_guid</stringProp>
                      </elementProp>
                      <elementProp name="tool_consumer_instance_name" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">Capella University</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">tool_consumer_instance_name</stringProp>
                      </elementProp>
                      <elementProp name="user_id" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">_${userid}_1</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">user_id</stringProp>
                      </elementProp>
                      <elementProp name="custom_course_membership_role" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">S</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">custom_course_membership_role</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${ltihost}</stringProp>
                  <stringProp name="HTTPSampler.port">${port}</stringProp>
                  <stringProp name="HTTPSampler.connect_timeout">${timeout}</stringProp>
                  <stringProp name="HTTPSampler.response_timeout">${timeout}</stringProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">${Encoding}</stringProp>
                  <stringProp name="HTTPSampler.path">/lti-producer/launch/courseTimeLine/view</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                  <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="OAuth Variables" enabled="true">
                    <boolProp name="resetInterpreter">true</boolProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="script">vars.put(&quot;appuuid&quot; , UUID.randomUUID().toString().replaceAll(&quot;-&quot;,&quot;&quot;));
vars.put(&quot;var_timestamp&quot;, &quot;&quot;+ (System.currentTimeMillis() / 1000));
vars.put(&quot;var_oauth_nonce&quot;, &quot;&quot; + (int) (Math.random() * 100000000));


String extCourseKey = vars.get(&quot;coursetitle&quot;);
extCourseKey = extCourseKey.substring(extCourseKey.indexOf(&quot;_&quot;)+1);
vars.put(&quot;extCourseKey&quot;,extCourseKey);</stringProp>
                  </BeanShellPreProcessor>
                  <hashTree/>
                  <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
                    <stringProp name="filename"></stringProp>
                    <stringProp name="parameters"></stringProp>
                    <boolProp name="resetInterpreter">true</boolProp>
                    <stringProp name="script">import javax.crypto.SecretKey;
import javax.crypto.spec.SecretKeySpec;
import javax.crypto.Mac;
import org.apache.commons.codec.binary.Base64;


	StringBuilder base = new StringBuilder();
     base.append(&quot;POST&amp;&quot;);
     base.append(URLEncoder.encode(vars.get(&quot;protocol&quot;) + 
                &quot;://&quot; + vars.get(&quot;host&quot;) + &quot;/lti-producer/launch/courseTimeLine/view&quot;, &quot;UTF-8&quot;));
     base.append(&quot;&amp;oauth_nonce=&quot;+vars.get(&quot;var_oauth_nonce&quot;));
     base.append(&quot;&amp;oauth_callback=about:blank&quot;);
     base.append(&quot;&amp;oauth_consumer_key=C@pell@bB9&quot;);
     base.append(&quot;&amp;oauth_signature_method=HMAC-SHA1&quot;);
     base.append(&quot;&amp;oauth_timestamp=&quot;+vars.get(&quot;var_timestamp&quot;));
     base.append(&quot;&amp;oauth_version=1.0&quot;);

     byte[] keyBytes = (&quot;d0n0tSh@re&quot; + &quot;&amp;&quot;).getBytes(&quot;UTF-8&quot;);

     SecretKey key = new SecretKeySpec(keyBytes, &quot;HmacSHA1&quot;);


     Mac mac = Mac.getInstance(&quot;HmacSHA1&quot;);
     mac.init(key);
     Base64 base64 = new Base64();
     String outhSignature = new String(base64.encode(mac.doFinal(
     	URLEncoder.encode(
                base.toString(), &quot;UTF-8&quot;).getBytes(&quot;UTF-8&quot;))), &quot;UTF-8&quot;).trim();
     vars.put(&quot;outhSignature&quot;, outhSignature);

</stringProp>
                  </BeanShellPreProcessor>
                  <hashTree/>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Accept-Language" elementType="Header">
                        <stringProp name="Header.name">Accept-Language</stringProp>
                        <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                      </elementProp>
                      <elementProp name="Accept" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                      </elementProp>
                      <elementProp name="User-Agent" elementType="Header">
                        <stringProp name="Header.name">User-Agent</stringProp>
                        <stringProp name="Header.value">Mozilla/5.0 (Windows NT 5.1; rv:${node.min}${node.min}.0) Gecko/20100101 Firefox/${node.min}${node.min}.0</stringProp>
                      </elementProp>
                      <elementProp name="Referer" elementType="Header">
                        <stringProp name="Header.name">Referer</stringProp>
                        <stringProp name="Header.value">${protocol}://${host}/webapps/bbgs-ContentAreaRenderer-BBLEARN/app/view?course_id=${flex_path_course}&amp;content_id=${appviewcontent_g2}</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Encoding" elementType="Header">
                        <stringProp name="Header.name">Accept-Encoding</stringProp>
                        <stringProp name="Header.value">gzip, deflate</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Success Assertion" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="921427622">Course Timeline</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">2</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="false">
                    <collectionProp name="CookieManager.cookies"/>
                    <boolProp name="CookieManager.clearEachIteration">true</boolProp>
                    <stringProp name="CookieManager.implementation">org.apache.jmeter.protocol.http.control.HC4CookieHandler</stringProp>
                  </CookieManager>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="AcademicTeamView" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="context_id" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${flex_path_course}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">context_id</stringProp>
                        <stringProp name="Argument.desc">false</stringProp>
                      </elementProp>
                      <elementProp name="context_label" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${coursetitle}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">context_label</stringProp>
                        <stringProp name="Argument.desc">false</stringProp>
                      </elementProp>
                      <elementProp name="context_title" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${coursetitilename_g2}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">context_title</stringProp>
                        <stringProp name="Argument.desc">false</stringProp>
                      </elementProp>
                      <elementProp name="custom_content_primary_key_identifier" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${appviewcontent_g2}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">custom_content_primary_key_identifier</stringProp>
                        <stringProp name="Argument.desc">false</stringProp>
                      </elementProp>
                      <elementProp name="custom_content_url" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">/courses/1/${coursetitle}/content/${appviewcontent_g2}/</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">custom_content_url</stringProp>
                        <stringProp name="Argument.desc">false</stringProp>
                      </elementProp>
                      <elementProp name="custom_course_course_id" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${coursetitle}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">custom_course_course_id</stringProp>
                        <stringProp name="Argument.desc">false</stringProp>
                      </elementProp>
                      <elementProp name="custom_course_external_course_key" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${extCourseKey}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">custom_course_external_course_key</stringProp>
                        <stringProp name="Argument.desc">false</stringProp>
                      </elementProp>
                      <elementProp name="custom_course_locale" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">@X@course.locale@X@</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">custom_course_locale</stringProp>
                        <stringProp name="Argument.desc">false</stringProp>
                      </elementProp>
                      <elementProp name="custom_course_membership_role_id" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">S</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">custom_course_membership_role_id</stringProp>
                        <stringProp name="Argument.desc">false</stringProp>
                      </elementProp>
                      <elementProp name="custom_course_name" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${coursetitilename_g2}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">custom_course_name</stringProp>
                        <stringProp name="Argument.desc">false</stringProp>
                      </elementProp>
                      <elementProp name="custom_course_primary_key" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${flex_path_course}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">custom_course_primary_key</stringProp>
                        <stringProp name="Argument.desc">false</stringProp>
                      </elementProp>
                      <elementProp name="custom_course_primary_key_identifier" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${flex_path_course}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">custom_course_primary_key_identifier</stringProp>
                        <stringProp name="Argument.desc">false</stringProp>
                      </elementProp>
                      <elementProp name="custom_course_url" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">/courses/1/${coursetitle}/</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">custom_course_url</stringProp>
                        <stringProp name="Argument.desc">false</stringProp>
                      </elementProp>
                      <elementProp name="custom_pccp_toollink_id" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${courseprogress_g2}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">custom_pccp_toollink_id</stringProp>
                        <stringProp name="Argument.desc">false</stringProp>
                      </elementProp>
                      <elementProp name="custom_request_locale" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">@X@request.locale@X@</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">custom_request_locale</stringProp>
                        <stringProp name="Argument.desc">false</stringProp>
                      </elementProp>
                      <elementProp name="custom_request_return_url" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">@X@request.return@X@</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">custom_request_return_url</stringProp>
                        <stringProp name="Argument.desc">false</stringProp>
                      </elementProp>
                      <elementProp name="custom_requestuuid" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">@X@request.id@X@</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">custom_requestuuid</stringProp>
                        <stringProp name="Argument.desc">false</stringProp>
                      </elementProp>
                      <elementProp name="custom_system_host_name" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${host}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">custom_system_host_name</stringProp>
                        <stringProp name="Argument.desc">false</stringProp>
                      </elementProp>
                      <elementProp name="custom_user_external_person_key" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${studentid}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">custom_user_external_person_key</stringProp>
                        <stringProp name="Argument.desc">false</stringProp>
                      </elementProp>
                      <elementProp name="custom_user_full_name" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value"> ${firstname}  ${lastname}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">custom_user_full_name</stringProp>
                        <stringProp name="Argument.desc">false</stringProp>
                      </elementProp>
                      <elementProp name="custom_user_locale" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">en_US</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">custom_user_locale</stringProp>
                        <stringProp name="Argument.desc">false</stringProp>
                      </elementProp>
                      <elementProp name="custom_user_primary_institution_role" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">STUDENT</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">custom_user_primary_institution_role</stringProp>
                        <stringProp name="Argument.desc">false</stringProp>
                      </elementProp>
                      <elementProp name="custom_user_primary_key" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">_${userid}_1</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">custom_user_primary_key</stringProp>
                        <stringProp name="Argument.desc">false</stringProp>
                      </elementProp>
                      <elementProp name="custom_user_primary_key_identifier" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">_${userid}_1</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">custom_user_primary_key_identifier</stringProp>
                        <stringProp name="Argument.desc">false</stringProp>
                      </elementProp>
                      <elementProp name="custom_user_secondary_institution_roles" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">custom_user_secondary_institution_roles</stringProp>
                        <stringProp name="Argument.desc">false</stringProp>
                      </elementProp>
                      <elementProp name="custom_user_system_roles" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">N</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">custom_user_system_roles</stringProp>
                        <stringProp name="Argument.desc">false</stringProp>
                      </elementProp>
                      <elementProp name="custom_user_username" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${username}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">custom_user_username</stringProp>
                        <stringProp name="Argument.desc">false</stringProp>
                      </elementProp>
                      <elementProp name="ext_launch_presentation_css_url" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">https://${host}/common/shared.css,https://${host}/branding/themes/as_2012_capella_oct14_088/theme.css</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">ext_launch_presentation_css_url</stringProp>
                        <stringProp name="Argument.desc">false</stringProp>
                      </elementProp>
                      <elementProp name="ext_lms" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">bb-9.1.201410.160373</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">ext_lms</stringProp>
                        <stringProp name="Argument.desc">false</stringProp>
                      </elementProp>
                      <elementProp name="launch_presentation_locale" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">en-US-CR30-V1-M</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">launch_presentation_locale</stringProp>
                        <stringProp name="Argument.desc">false</stringProp>
                      </elementProp>
                      <elementProp name="lis_person_contact_email_primary" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${useremailid_g1}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">lis_person_contact_email_primary</stringProp>
                        <stringProp name="Argument.desc">false</stringProp>
                      </elementProp>
                      <elementProp name="lis_person_name_family" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${lastname}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">lis_person_name_family</stringProp>
                        <stringProp name="Argument.desc">false</stringProp>
                      </elementProp>
                      <elementProp name="lis_person_name_full" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value"> ${firstname}  ${lastname}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">lis_person_name_full</stringProp>
                        <stringProp name="Argument.desc">false</stringProp>
                      </elementProp>
                      <elementProp name="lis_person_name_given" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${firstname}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">lis_person_name_given</stringProp>
                        <stringProp name="Argument.desc">false</stringProp>
                      </elementProp>
                      <elementProp name="lti_message_type" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">basic-lti-launch-request</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">lti_message_type</stringProp>
                        <stringProp name="Argument.desc">false</stringProp>
                      </elementProp>
                      <elementProp name="lti_version" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">LTI-1p0</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">lti_version</stringProp>
                        <stringProp name="Argument.desc">false</stringProp>
                      </elementProp>
                      <elementProp name="oauth_callback" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">about:blank</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">oauth_callback</stringProp>
                        <stringProp name="Argument.desc">false</stringProp>
                      </elementProp>
                      <elementProp name="oauth_consumer_key" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">C@pell@bB9</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">oauth_consumer_key</stringProp>
                        <stringProp name="Argument.desc">false</stringProp>
                      </elementProp>
                      <elementProp name="oauth_nonce" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${var_oauth_nonce}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">oauth_nonce</stringProp>
                        <stringProp name="Argument.desc">false</stringProp>
                      </elementProp>
                      <elementProp name="oauth_signature" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${outhSignature}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">oauth_signature</stringProp>
                        <stringProp name="Argument.desc">false</stringProp>
                      </elementProp>
                      <elementProp name="oauth_signature_method" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">HMAC-SHA1</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">oauth_signature_method</stringProp>
                        <stringProp name="Argument.desc">false</stringProp>
                      </elementProp>
                      <elementProp name="oauth_timestamp" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${var_timestamp}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">oauth_timestamp</stringProp>
                        <stringProp name="Argument.desc">false</stringProp>
                      </elementProp>
                      <elementProp name="oauth_version" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">1.0</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">oauth_version</stringProp>
                        <stringProp name="Argument.desc">false</stringProp>
                      </elementProp>
                      <elementProp name="resource_link_id" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${appviewcontent_g2}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">resource_link_id</stringProp>
                        <stringProp name="Argument.desc">false</stringProp>
                      </elementProp>
                      <elementProp name="roles" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">urn:lti:role:ims/lis/Learner</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">roles</stringProp>
                        <stringProp name="Argument.desc">false</stringProp>
                      </elementProp>
                      <elementProp name="tool_consumer_instance_contact_email" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">courseroom.admin@capella.edu</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">tool_consumer_instance_contact_email</stringProp>
                        <stringProp name="Argument.desc">false</stringProp>
                      </elementProp>
                      <elementProp name="tool_consumer_instance_guid" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${useruuid}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">tool_consumer_instance_guid</stringProp>
                        <stringProp name="Argument.desc">false</stringProp>
                      </elementProp>
                      <elementProp name="tool_consumer_instance_name" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">Capella University</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">tool_consumer_instance_name</stringProp>
                        <stringProp name="Argument.desc">false</stringProp>
                      </elementProp>
                      <elementProp name="user_id" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">_${userid}_1</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">user_id</stringProp>
                        <stringProp name="Argument.desc">false</stringProp>
                      </elementProp>
                      <elementProp name="custom_course_membership_role" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">S</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">custom_course_membership_role</stringProp>
                        <stringProp name="Argument.desc">false</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${ltihost}</stringProp>
                  <stringProp name="HTTPSampler.port">${port}</stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/lti-producer/launch/academicTeam/view</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="OAuth Variables" enabled="true">
                    <boolProp name="resetInterpreter">true</boolProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="script">vars.put(&quot;appuuid&quot; , UUID.randomUUID().toString().replaceAll(&quot;-&quot;,&quot;&quot;));
vars.put(&quot;var_timestamp&quot;, &quot;&quot;+ (System.currentTimeMillis() / 1000));
vars.put(&quot;var_oauth_nonce&quot;, &quot;&quot; + (int) (Math.random() * 100000000));

String extCourseKey = vars.get(&quot;coursetitle&quot;);
extCourseKey = extCourseKey.substring(extCourseKey.indexOf(&quot;_&quot;)+1);
vars.put(&quot;extCourseKey&quot;,extCourseKey);</stringProp>
                  </BeanShellPreProcessor>
                  <hashTree/>
                  <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
                    <stringProp name="filename"></stringProp>
                    <stringProp name="parameters"></stringProp>
                    <boolProp name="resetInterpreter">true</boolProp>
                    <stringProp name="script">import javax.crypto.SecretKey;
import javax.crypto.spec.SecretKeySpec;
import javax.crypto.Mac;
import org.apache.commons.codec.binary.Base64;


	StringBuilder base = new StringBuilder();
     base.append(&quot;POST&amp;&quot;);
     base.append(URLEncoder.encode(vars.get(&quot;protocol&quot;) + 
                &quot;://&quot;+vars.get(&quot;host&quot;)+&quot;/lti-producer/launch/courseTimeLine/view&quot;, &quot;UTF-8&quot;));
     base.append(&quot;&amp;oauth_nonce=&quot;+vars.get(&quot;var_oauth_nonce&quot;));
     base.append(&quot;&amp;oauth_callback=about:blank&quot;);
     base.append(&quot;&amp;oauth_consumer_key=C@pell@bB9&quot;);
     base.append(&quot;&amp;oauth_signature_method=HMAC-SHA1&quot;);
     base.append(&quot;&amp;oauth_timestamp=&quot;+vars.get(&quot;var_timestamp&quot;));
     base.append(&quot;&amp;oauth_version=1.0&quot;);

     byte[] keyBytes = (&quot;d0n0tSh@re&quot; + &quot;&amp;&quot;).getBytes(&quot;UTF-8&quot;);

     SecretKey key = new SecretKeySpec(keyBytes, &quot;HmacSHA1&quot;);

     Mac mac = Mac.getInstance(&quot;HmacSHA1&quot;);
     mac.init(key);
     Base64 base64 = new Base64();
     String outhSignature = new String(base64.encode(mac.doFinal(
     	URLEncoder.encode(
                base.toString(), &quot;UTF-8&quot;).getBytes(&quot;UTF-8&quot;))), &quot;UTF-8&quot;).trim();
     vars.put(&quot;outhSignature&quot;, outhSignature);

</stringProp>
                  </BeanShellPreProcessor>
                  <hashTree/>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Accept-Language" elementType="Header">
                        <stringProp name="Header.name">Accept-Language</stringProp>
                        <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                      </elementProp>
                      <elementProp name="Accept" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                      </elementProp>
                      <elementProp name="User-Agent" elementType="Header">
                        <stringProp name="Header.name">User-Agent</stringProp>
                        <stringProp name="Header.value">Mozilla/5.0 (Windows NT 5.1; rv:${node.min}${node.min}.0) Gecko/20100101 Firefox/${node.min}${node.min}.0</stringProp>
                      </elementProp>
                      <elementProp name="Referer" elementType="Header">
                        <stringProp name="Header.name">Referer</stringProp>
                        <stringProp name="Header.value">${protocol}://${environment}sa.capella.edu/webapps/blackboard/content/listContent.jsp?course_id=_2041${node.max}_1&amp;content_id=_2029792_1&amp;mode=reset</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Encoding" elementType="Header">
                        <stringProp name="Header.name">Accept-Encoding</stringProp>
                        <stringProp name="Header.value">gzip, deflate</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Success Assertion" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="2004362710">Academic Team</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">2</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Contact_A_Tutor" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">www.capella.edu</stringProp>
                  <stringProp name="HTTPSampler.port">80</stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol">http</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/iguidepa/forms/learner/Contact_A_Tutor_Form.asp</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.implementation">Java</stringProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="49586">200</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">2</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Contact_A_Couch" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">campus.capella.edu</stringProp>
                  <stringProp name="HTTPSampler.port">${port}</stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/web/flexpath/flexpath-support-team/contact-your-coach</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.implementation">Java</stringProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="49586">200</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">2</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                </hashTree>
              </hashTree>
            </hashTree>
          </hashTree>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Logout" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="action" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">action</stringProp>
                <stringProp name="Argument.value">logout</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${host}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/webapps/login</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.implementation">Java</stringProp>
          <boolProp name="HTTPSampler.image_parser">true</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Success Assertion" enabled="false">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="861081405">You are logged out</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Success Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <RecordingController guiclass="RecordController" testclass="RecordingController" testname="Recording Controller" enabled="true"/>
        <hashTree/>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
      </hashTree>
      <ResultCollector guiclass="StatGraphVisualizer" testclass="ResultCollector" testname="Aggregate Graph" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>false</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <hostname>true</hostname>
            <threadCounts>true</threadCounts>
            <sampleCount>true</sampleCount>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>false</time>
            <latency>false</latency>
            <timestamp>false</timestamp>
            <success>false</success>
            <label>false</label>
            <code>false</code>
            <message>false</message>
            <threadName>false</threadName>
            <dataType>false</dataType>
            <encoding>false</encoding>
            <assertions>false</assertions>
            <subresults>false</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>false</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <hostname>true</hostname>
            <threadCounts>true</threadCounts>
            <sampleCount>true</sampleCount>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree - Error" enabled="true">
        <boolProp name="ResultCollector.error_logging">true</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>false</time>
            <latency>false</latency>
            <timestamp>false</timestamp>
            <success>false</success>
            <label>false</label>
            <code>true</code>
            <message>true</message>
            <threadName>false</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>false</assertions>
            <subresults>false</subresults>
            <responseData>false</responseData>
            <samplerData>true</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>true</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <hostname>true</hostname>
            <threadCounts>true</threadCounts>
            <sampleCount>true</sampleCount>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree - Success" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>true</xml>
            <fieldNames>false</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <hostname>true</hostname>
            <threadCounts>true</threadCounts>
            <sampleCount>true</sampleCount>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
        <boolProp name="ResultCollector.success_only_logging">true</boolProp>
      </ResultCollector>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
