<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="2.6" jmeter="2.11 r1554548">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">true</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="protocol" elementType="Argument">
            <stringProp name="Argument.name">protocol</stringProp>
            <stringProp name="Argument.value">http</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="host" elementType="Argument">
            <stringProp name="Argument.name">host</stringProp>
            <stringProp name="Argument.value"></stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="port" elementType="Argument">
            <stringProp name="Argument.name">port</stringProp>
            <stringProp name="Argument.value">8080</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="soap_env_start" elementType="Argument">
            <stringProp name="Argument.name">soap_env_start</stringProp>
            <stringProp name="Argument.value">&lt;SOAP-ENV:Envelope xmlns:SOAP-ENV=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt;&lt;SOAP-ENV:Header/&gt;&lt;SOAP-ENV:Body&gt;</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="soap_env_end" elementType="Argument">
            <stringProp name="Argument.name">soap_env_end</stringProp>
            <stringProp name="Argument.value">&lt;/SOAP-ENV:Body&gt;&lt;/SOAP-ENV:Envelope&gt;</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="hostprefix" elementType="Argument">
            <stringProp name="Argument.name">hostprefix</stringProp>
            <stringProp name="Argument.value">sthuwb</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">qahuwb, sthuwb0</stringProp>
          </elementProp>
          <elementProp name="node.min" elementType="Argument">
            <stringProp name="Argument.name">node.min</stringProp>
            <stringProp name="Argument.value">20</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="node.max" elementType="Argument">
            <stringProp name="Argument.name">node.max</stringProp>
            <stringProp name="Argument.value">22</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="random_node" elementType="Argument">
            <stringProp name="Argument.name">random_node</stringProp>
            <stringProp name="Argument.value"></stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group" enabled="true">
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">5</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1364994000000</longProp>
        <longProp name="ThreadGroup.end_time">1365001200000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <stringProp name="ThreadGroup.duration">7200               </stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Hubble Request File Extractor" enabled="true">
          <stringProp name="delimiter">,</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="filename">hubble-requests-15-Jun-12.txt</stringProp>
          <boolProp name="quotedData">true</boolProp>
          <boolProp name="recycle">true</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="variableNames">time,user,request,perftime,messagetype</stringProp>
        </CSVDataSet>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="SelfRegistrationEligibilityRequestCSV Data Set Config" enabled="true">
          <stringProp name="delimiter">,</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="filename">SelfRegistrationEligibilityRequestData.txt</stringProp>
          <boolProp name="quotedData">true</boolProp>
          <boolProp name="recycle">true</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="variableNames">employeeId,catalogSubject,catalogNumber,sessionStartDate,termStartDate</stringProp>
        </CSVDataSet>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Simple Controller" enabled="true"/>
        <hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller - Using specific nodes?" enabled="true">
            <stringProp name="IfController.condition">${node.min}&gt;0</stringProp>
            <boolProp name="IfController.evaluateAll">true</boolProp>
          </IfController>
          <hashTree>
            <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
              <stringProp name="CounterConfig.start">${node.min}</stringProp>
              <stringProp name="CounterConfig.end">${node.max}</stringProp>
              <stringProp name="CounterConfig.incr">1</stringProp>
              <stringProp name="CounterConfig.name">random_node</stringProp>
              <stringProp name="CounterConfig.format"></stringProp>
              <boolProp name="CounterConfig.per_user">false</boolProp>
            </CounterConfig>
            <hashTree/>
          </hashTree>
          <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="Calculate Host" enabled="true">
            <collectionProp name="UserParameters.names">
              <stringProp name="3208616">host</stringProp>
            </collectionProp>
            <collectionProp name="UserParameters.thread_values">
              <collectionProp name="-1909741923">
                <stringProp name="-1298772246">${hostprefix}${random_node}.capella.edu</stringProp>
              </collectionProp>
            </collectionProp>
            <boolProp name="UserParameters.per_iteration">false</boolProp>
          </UserParameters>
          <hashTree/>
          <ConstantThroughputTimer guiclass="TestBeanGUI" testclass="ConstantThroughputTimer" testname="Constant Throughput Timer" enabled="true">
            <intProp name="calcMode">4</intProp>
            <doubleProp>
              <name>throughput</name>
              <value>700.0</value>
              <savedValue>0.0</savedValue>
            </doubleProp>
          </ConstantThroughputTimer>
          <hashTree/>
          <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP Authorization Manager" enabled="true">
            <collectionProp name="AuthManager.auth_list">
              <elementProp name="" elementType="Authorization">
                <stringProp name="Authorization.url">http://dvhuwb02.capella.edu:8080</stringProp>
                <stringProp name="Authorization.username">iguidewsuser</stringProp>
                <stringProp name="Authorization.password">Password99</stringProp>
                <stringProp name="Authorization.domain">/</stringProp>
                <stringProp name="Authorization.realm"></stringProp>
              </elementProp>
              <elementProp name="" elementType="Authorization">
                <stringProp name="Authorization.url">http://dvhuwb01.capella.edu:8080/</stringProp>
                <stringProp name="Authorization.username">iguidewsuser</stringProp>
                <stringProp name="Authorization.password">Password99</stringProp>
                <stringProp name="Authorization.domain">/</stringProp>
                <stringProp name="Authorization.realm"></stringProp>
              </elementProp>
              <elementProp name="" elementType="Authorization">
                <stringProp name="Authorization.url">http://qahubble.capella.edu</stringProp>
                <stringProp name="Authorization.username">iguidewsuser</stringProp>
                <stringProp name="Authorization.password">Password99</stringProp>
                <stringProp name="Authorization.domain">/</stringProp>
                <stringProp name="Authorization.realm"></stringProp>
              </elementProp>
              <elementProp name="" elementType="Authorization">
                <stringProp name="Authorization.url">http://stghubble.capella.edu</stringProp>
                <stringProp name="Authorization.username">tmp.matt.leising</stringProp>
                <stringProp name="Authorization.password">notPass99</stringProp>
                <stringProp name="Authorization.domain">/</stringProp>
                <stringProp name="Authorization.realm"></stringProp>
              </elementProp>
              <elementProp name="" elementType="Authorization">
                <stringProp name="Authorization.url">http://sthuwb01.capella.edu:8080</stringProp>
                <stringProp name="Authorization.username">tmp.matt.leising</stringProp>
                <stringProp name="Authorization.password">notPass99</stringProp>
                <stringProp name="Authorization.domain">/</stringProp>
                <stringProp name="Authorization.realm"></stringProp>
              </elementProp>
              <elementProp name="" elementType="Authorization">
                <stringProp name="Authorization.url">http://sthuwb02.capella.edu:8080</stringProp>
                <stringProp name="Authorization.username">tmp.matt.leising</stringProp>
                <stringProp name="Authorization.password">notPass99</stringProp>
                <stringProp name="Authorization.domain">/</stringProp>
                <stringProp name="Authorization.realm"></stringProp>
              </elementProp>
              <elementProp name="" elementType="Authorization">
                <stringProp name="Authorization.url">http://qahuwb01.capella.edu:8080</stringProp>
                <stringProp name="Authorization.username">iguidewsuser</stringProp>
                <stringProp name="Authorization.password">Password99</stringProp>
                <stringProp name="Authorization.domain">/</stringProp>
                <stringProp name="Authorization.realm"></stringProp>
              </elementProp>
              <elementProp name="" elementType="Authorization">
                <stringProp name="Authorization.url">http://qahuwb02.capella.edu:8080</stringProp>
                <stringProp name="Authorization.username">iguidewsuser</stringProp>
                <stringProp name="Authorization.password">Password99</stringProp>
                <stringProp name="Authorization.domain">/</stringProp>
                <stringProp name="Authorization.realm"></stringProp>
              </elementProp>
              <elementProp name="" elementType="Authorization">
                <stringProp name="Authorization.url">http://localhost.capella.edu:8080</stringProp>
                <stringProp name="Authorization.username">iguidewsuser</stringProp>
                <stringProp name="Authorization.password">trust3d</stringProp>
                <stringProp name="Authorization.domain">/</stringProp>
                <stringProp name="Authorization.realm"></stringProp>
              </elementProp>
              <elementProp name="" elementType="Authorization">
                <stringProp name="Authorization.url">http://sthuwb04.capella.edu:8080</stringProp>
                <stringProp name="Authorization.username">tmp.matt.leising</stringProp>
                <stringProp name="Authorization.password">notPass99</stringProp>
                <stringProp name="Authorization.domain">/</stringProp>
                <stringProp name="Authorization.realm"></stringProp>
              </elementProp>
              <elementProp name="" elementType="Authorization">
                <stringProp name="Authorization.url">http://qahuwb03.capella.edu:8080</stringProp>
                <stringProp name="Authorization.username">iguidewsuser</stringProp>
                <stringProp name="Authorization.password">Password99</stringProp>
                <stringProp name="Authorization.domain">/</stringProp>
                <stringProp name="Authorization.realm"></stringProp>
              </elementProp>
              <elementProp name="" elementType="Authorization">
                <stringProp name="Authorization.url">http://qahuwb04.capella.edu:8080</stringProp>
                <stringProp name="Authorization.username">iguidewsuser</stringProp>
                <stringProp name="Authorization.password">Password99</stringProp>
                <stringProp name="Authorization.domain">/</stringProp>
                <stringProp name="Authorization.realm"></stringProp>
              </elementProp>
              <elementProp name="" elementType="Authorization">
                <stringProp name="Authorization.url">http://sthuwb03.capella.edu:8080</stringProp>
                <stringProp name="Authorization.username">tmp.matt.leising</stringProp>
                <stringProp name="Authorization.password">notPass99</stringProp>
                <stringProp name="Authorization.domain">/</stringProp>
                <stringProp name="Authorization.realm"></stringProp>
              </elementProp>
              <elementProp name="" elementType="Authorization">
                <stringProp name="Authorization.url">http://sthuwb20.capella.edu:8080</stringProp>
                <stringProp name="Authorization.username">iguidewsuser</stringProp>
                <stringProp name="Authorization.password">trust3d</stringProp>
                <stringProp name="Authorization.domain">/</stringProp>
                <stringProp name="Authorization.realm"></stringProp>
              </elementProp>
              <elementProp name="" elementType="Authorization">
                <stringProp name="Authorization.url">http://sthuwb21.capella.edu:8080</stringProp>
                <stringProp name="Authorization.username">iguidewsuser</stringProp>
                <stringProp name="Authorization.password">trust3d</stringProp>
                <stringProp name="Authorization.domain">/</stringProp>
                <stringProp name="Authorization.realm"></stringProp>
              </elementProp>
              <elementProp name="" elementType="Authorization">
                <stringProp name="Authorization.url">http://sthuwb22.capella.edu:8080</stringProp>
                <stringProp name="Authorization.username">iguidewsuser</stringProp>
                <stringProp name="Authorization.password">trust3d</stringProp>
                <stringProp name="Authorization.domain">/</stringProp>
                <stringProp name="Authorization.realm"></stringProp>
              </elementProp>
            </collectionProp>
          </AuthManager>
          <hashTree/>
          <SoapSampler guiclass="SoapSamplerGui" testclass="SoapSampler" testname="${messagetype}" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="SoapSampler.URL_DATA">${protocol}://${host}:${port}/edu.capella-hubble-web/webservices</stringProp>
            <stringProp name="HTTPSamper.xml_data">${soap_env_start}${request}${soap_env_end}</stringProp>
            <stringProp name="SoapSampler.xml_data_file"></stringProp>
            <stringProp name="SoapSampler.SOAP_ACTION"></stringProp>
            <stringProp name="SoapSampler.SEND_SOAP_ACTION">false</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
          </SoapSampler>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
              <stringProp name="RegexExtractor.refname">Active</stringProp>
              <stringProp name="RegexExtractor.regex">&lt;active&gt;(\w{4})&lt;\/active&gt;&lt;mailCount&gt;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">false</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="Active Courses?" enabled="true">
            <stringProp name="IfController.condition">&quot;${Active}&quot; == &quot;true&quot;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${messagetype} - Active" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${host}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">edu.capella-hubble-web/keepalive.run</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
          </hashTree>
          <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="Caps Data Messaging request" enabled="false">
            <intProp name="ThroughputController.style">1</intProp>
            <boolProp name="ThroughputController.perThread">false</boolProp>
            <intProp name="ThroughputController.maxThroughput">1</intProp>
            <FloatProperty>
              <name>ThroughputController.percentThroughput</name>
              <value>0.18</value>
              <savedValue>0.0</savedValue>
            </FloatProperty>
          </ThroughputController>
          <hashTree>
            <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
              <stringProp name="delimiter"></stringProp>
              <stringProp name="fileEncoding"></stringProp>
              <stringProp name="filename">dataMessageRequestsCaps.txt</stringProp>
              <boolProp name="quotedData">true</boolProp>
              <boolProp name="recycle">true</boolProp>
              <stringProp name="shareMode">shareMode.all</stringProp>
              <boolProp name="stopThread">false</boolProp>
              <stringProp name="variableNames">capsDMRequest</stringProp>
            </CSVDataSet>
            <hashTree/>
            <SoapSampler guiclass="SoapSamplerGui" testclass="SoapSampler" testname="Caps Data Message Request" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SoapSampler.URL_DATA">${protocol}://${host}:${port}/edu.capella-hubble-web/webservices</stringProp>
              <stringProp name="HTTPSamper.xml_data">${soap_env_start}${capsDMRequest}${soap_env_end}</stringProp>
              <stringProp name="SoapSampler.xml_data_file"></stringProp>
              <stringProp name="SoapSampler.SOAP_ACTION"></stringProp>
              <stringProp name="SoapSampler.SEND_SOAP_ACTION">false</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            </SoapSampler>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                <stringProp name="RegexExtractor.refname">Active</stringProp>
                <stringProp name="RegexExtractor.regex">&lt;active&gt;(.*)&lt;\/active&gt;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">false</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="Caps Learner Enrollment Request" enabled="false">
            <intProp name="ThroughputController.style">1</intProp>
            <boolProp name="ThroughputController.perThread">false</boolProp>
            <intProp name="ThroughputController.maxThroughput">1</intProp>
            <FloatProperty>
              <name>ThroughputController.percentThroughput</name>
              <value>0.18</value>
              <savedValue>0.0</savedValue>
            </FloatProperty>
          </ThroughputController>
          <hashTree>
            <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
              <stringProp name="delimiter"></stringProp>
              <stringProp name="fileEncoding"></stringProp>
              <stringProp name="filename">EnrollDrop01262012.txt</stringProp>
              <boolProp name="quotedData">true</boolProp>
              <boolProp name="recycle">true</boolProp>
              <stringProp name="shareMode">shareMode.all</stringProp>
              <boolProp name="stopThread">false</boolProp>
              <stringProp name="variableNames">capsLERequest</stringProp>
            </CSVDataSet>
            <hashTree/>
            <SoapSampler guiclass="SoapSamplerGui" testclass="SoapSampler" testname="Caps Learner Enrollment Request" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SoapSampler.URL_DATA">${protocol}://${host}:${port}/edu.capella-hubble-web/webservices</stringProp>
              <stringProp name="HTTPSamper.xml_data">${soap_env_start}${capsLERequest}${soap_env_end}</stringProp>
              <stringProp name="SoapSampler.xml_data_file"></stringProp>
              <stringProp name="SoapSampler.SOAP_ACTION"></stringProp>
              <stringProp name="SoapSampler.SEND_SOAP_ACTION">false</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            </SoapSampler>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                <stringProp name="RegexExtractor.refname">Active</stringProp>
                <stringProp name="RegexExtractor.regex">&lt;active&gt;(.*)&lt;\/active&gt;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">false</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="SelfRegistrationEligibilityRequest Controller" enabled="true">
            <intProp name="ThroughputController.style">1</intProp>
            <boolProp name="ThroughputController.perThread">true</boolProp>
            <intProp name="ThroughputController.maxThroughput">1</intProp>
            <FloatProperty>
              <name>ThroughputController.percentThroughput</name>
              <value>10.0</value>
              <savedValue>0.0</savedValue>
            </FloatProperty>
          </ThroughputController>
          <hashTree>
            <SoapSampler guiclass="SoapSamplerGui" testclass="SoapSampler" testname="SelfRegistrationEligibilityRequest" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SoapSampler.URL_DATA">${protocol}://${host}:${port}/hubble-new/services/soap/RegistrationService</stringProp>
              <stringProp name="HTTPSamper.xml_data"> &lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:reg=&quot;http://www.capella.edu/ns/hubble/service/registration&quot;&gt;
   &lt;soapenv:Header/&gt;
   &lt;soapenv:Body&gt;
     &lt;reg:SelfRegistrationEligibilityRequest&gt;
&lt;clientId&gt;IGUIDE&lt;/clientId&gt;
&lt;serviceVersion&gt;13.02&lt;/serviceVersion&gt;
&lt;employeeId&gt;${employeeId}&lt;/employeeId&gt;
&lt;classDetails&gt;
&lt;catalogSubject&gt;${catalogSubject}&lt;/catalogSubject&gt;
&lt;catalogNumber&gt;${catalogNumber}&lt;/catalogNumber&gt;
&lt;sessionStartDate&gt;${sessionStartDate}&lt;/sessionStartDate&gt;
&lt;termStartDate&gt;${termStartDate}&lt;/termStartDate&gt;
&lt;/classDetails&gt;
&lt;/reg:SelfRegistrationEligibilityRequest&gt;
&lt;/soapenv:Body&gt;
&lt;/soapenv:Envelope&gt;</stringProp>
              <stringProp name="SoapSampler.xml_data_file"></stringProp>
              <stringProp name="SoapSampler.SOAP_ACTION"></stringProp>
              <stringProp name="SoapSampler.SEND_SOAP_ACTION">false</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            </SoapSampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.scope">all</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
      </hashTree>
      <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>true</xml>
            <fieldNames>false</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
          </value>
        </objProp>
        <stringProp name="filename">C:\Temp\performance\Hubble\AggregateReport.csv</stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="TableVisualizer" testclass="ResultCollector" testname="View Results in Table" enabled="true">
        <boolProp name="ResultCollector.error_logging">true</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>true</xml>
            <fieldNames>false</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
          </value>
        </objProp>
        <stringProp name="filename">C:\Temp\performance\Hubble\load_test_view_results.jmx</stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">true</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>true</xml>
            <fieldNames>false</fieldNames>
            <responseHeaders>true</responseHeaders>
            <requestHeaders>true</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
          </value>
        </objProp>
        <stringProp name="filename">C:\Temp\performance\Hubble\load_test_view_table_results.jmx</stringProp>
      </ResultCollector>
      <hashTree/>
      <kg.apc.jmeter.perfmon.PerfMonCollector guiclass="kg.apc.jmeter.vizualizers.PerfMonGui" testclass="kg.apc.jmeter.perfmon.PerfMonCollector" testname="jp@gc - PerfMon Metrics Collector" enabled="false">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>true</xml>
            <fieldNames>false</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
          </value>
        </objProp>
        <stringProp name="filename">C:\Temp\performance\PerfMonitorGraph</stringProp>
        <longProp name="interval_grouping">1000</longProp>
        <boolProp name="graph_aggregated">false</boolProp>
        <stringProp name="include_sample_labels"></stringProp>
        <stringProp name="exclude_sample_labels"></stringProp>
        <collectionProp name="metricConnections">
          <collectionProp name="917712290">
            <stringProp name="-1204607085">localhost</stringProp>
            <stringProp name="1600768">4444</stringProp>
            <stringProp name="66952">CPU</stringProp>
            <stringProp name="0"></stringProp>
          </collectionProp>
          <collectionProp name="-1383002031">
            <stringProp name="-1204607085">localhost</stringProp>
            <stringProp name="1600768">4444</stringProp>
            <stringProp name="-1993889503">Memory</stringProp>
            <stringProp name="0"></stringProp>
          </collectionProp>
          <collectionProp name="506007220">
            <stringProp name="-1204607085">localhost</stringProp>
            <stringProp name="1600768">4444</stringProp>
            <stringProp name="2112896831">Disks I/O</stringProp>
            <stringProp name="0"></stringProp>
          </collectionProp>
          <collectionProp name="1870391425">
            <stringProp name="-1204607085">localhost</stringProp>
            <stringProp name="1600768">4444</stringProp>
            <stringProp name="73589">JMX</stringProp>
            <stringProp name="0"></stringProp>
          </collectionProp>
          <collectionProp name="917712290">
            <stringProp name="-1204607085">localhost</stringProp>
            <stringProp name="1600768">4444</stringProp>
            <stringProp name="66952">CPU</stringProp>
            <stringProp name="0"></stringProp>
          </collectionProp>
        </collectionProp>
      </kg.apc.jmeter.perfmon.PerfMonCollector>
      <hashTree/>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree- Sucess" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>true</xml>
            <fieldNames>false</fieldNames>
            <responseHeaders>true</responseHeaders>
            <requestHeaders>true</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
        <boolProp name="ResultCollector.success_only_logging">true</boolProp>
      </ResultCollector>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
